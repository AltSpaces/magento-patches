diff --git downloader/lib/Mage/Connect/Packager.php downloader/lib/Mage/Connect/Packager.php
index 0e9ef0d..f451399 100644
--- downloader/lib/Mage/Connect/Packager.php
+++ downloader/lib/Mage/Connect/Packager.php
@@ -193,8 +193,15 @@ class Mage_Connect_Packager
                 }
             }
         } else {
-            if (@rmdir($dir)) {
-                $this->removeEmptyDirectory(dirname($dir), $ftp);
+            $content = scandir($dir);
+            if ($content === false) return;
+
+            if (count(array_diff($content, array('.', '..'))) == 0) {
+                if (@rmdir($dir)) {
+                    $this->removeEmptyDirectory(dirname($dir), $ftp);
+                } else {
+                    throw new RuntimeException('Failed to delete dir ' . $dir . "\r\n Check permissions");
+                }
             }
         }
     }
@@ -205,6 +212,7 @@ class Mage_Connect_Packager
      * @param $package
      * @param Mage_Connect_Singleconfig $cacheObj
      * @param Mage_Connect_Config $configObj
+     * @throws RuntimeException
      * @return unknown_type
      */
     public function processUninstallPackage($chanName, $package, $cacheObj, $configObj)
@@ -213,14 +221,21 @@ class Mage_Connect_Packager
         $contents = $package->getContents();
 
         $targetPath = rtrim($configObj->magento_root, "\\/");
+        $failedFiles = array();
         foreach($contents as $file) {
             $fileName = basename($file);
             $filePath = dirname($file);
             $dest = $targetPath . DIRECTORY_SEPARATOR . $filePath . DIRECTORY_SEPARATOR . $fileName;
             if(@file_exists($dest)) {
-                @unlink($dest);
-                $this->removeEmptyDirectory(dirname($dest));
+                if (!@unlink($dest)) {
+                    $failedFiles[] = $dest;
+                }
             }
+            $this->removeEmptyDirectory(dirname($dest));
+        }
+        if (!empty($failedFiles)) {
+            $msg = sprintf("Failed to delete files: %s \r\n Check permissions", implode("\r\n", $failedFiles));
+            throw new RuntimeException($msg);
         }
 
         $destDir = $targetPath . DS . Mage_Connect_Package::PACKAGE_XML_DIR;
@@ -234,6 +249,7 @@ class Mage_Connect_Packager
      * @param $package
      * @param Mage_Connect_Singleconfig $cacheObj
      * @param Mage_Connect_Ftp $ftp
+     * @throws RuntimeException
      * @return unknown_type
      */
     public function processUninstallPackageFtp($chanName, $package, $cacheObj, $ftp)
@@ -241,10 +257,15 @@ class Mage_Connect_Packager
         $ftpDir = $ftp->getcwd();
         $package = $cacheObj->getPackageObject($chanName, $package);
         $contents = $package->getContents();
+        $failedFiles = array();
         foreach($contents as $file) {
             $res = $ftp->delete($file);
             $this->removeEmptyDirectory(dirname($file), $ftp);
         }
+        if (!empty($failedFiles)) {
+            $msg = sprintf("Failed to delete files: %s \r\n Check permissions", implode("\r\n", $failedFiles));
+            throw new RuntimeException($msg);
+        }
         $remoteXml = Mage_Connect_Package::PACKAGE_XML_DIR . DS . $package->getReleaseFilename() . '.xml';
         $ftp->delete($remoteXml);
         $ftp->chdir($ftpDir);
@@ -316,7 +337,18 @@ class Mage_Connect_Packager
         $tar = $arc->unpack($file, $target);
         $modeFile = $this->_getFileMode($configObj);
         $modeDir = $this->_getDirMode($configObj);
+        $targetPath = rtrim($configObj->magento_root, "\\/");
+        $packageXmlDir = $targetPath . DS . Mage_Connect_Package::PACKAGE_XML_DIR;
+        if (!is_dir_writeable($packageXmlDir)) {
+            throw new RuntimeException('Directory ' . $packageXmlDir . ' is not writable. Check permission');
+        }
+        $this->_makeDirectories($contents, $targetPath, $modeDir);
         foreach($contents as $file) {
+            $ftp->delete($file);
+            if ($ftp->fileExists($file)) {
+                $failedFiles[] = $file;
+                continue;
+            }
             $fileName = basename($file);
             $filePath = $this->convertFtpPath(dirname($file));
             $source = $tar.DS.$file;
@@ -326,11 +358,18 @@ class Mage_Connect_Packager
                     $args[] = $modeDir;
                     $args[] = $modeFile;
                 }
-                call_user_func_array(array($ftp,'upload'), $args);
+                if (call_user_func_array(array($ftp,'upload'), $args) === false) {
+                    $failedFiles[] = $source;
+                }
             }
         }
 
         $localXml = $tar . Mage_Connect_Package_Reader::DEFAULT_NAME_PACKAGE;
+
+        if (!empty($failedFiles)) {
+            $msg = sprintf("Failed to upload files: %s \r\n Check permissions", implode("\r\n", $failedFiles));
+            throw new RuntimeException($msg);
+        }
         if (is_file($localXml)) {
             $remoteXml = Mage_Connect_Package::PACKAGE_XML_DIR . DS . $package->getReleaseFilename() . '.xml';
             $ftp->upload($remoteXml, $localXml, $modeDir, $modeFile);
@@ -344,7 +383,7 @@ class Mage_Connect_Packager
      * Package installation to FS
      * @param Mage_Connect_Package $package
      * @param string $file
-     * @return void
+     * @throws RuntimeException
      * @throws Exception
      */
     public function processInstallPackage($package, $file, $configObj)
@@ -352,16 +391,19 @@ class Mage_Connect_Packager
         $contents = $package->getContents();
         $arc = $this->getArchiver();
         $target = dirname($file).DS.$package->getReleaseFilename();
-        @mkdir($target, 0777, true);
+        if (!@mkdir($target, 0777, true)) {
+            throw new RuntimeException("Can't create directory ". $target);
+        }
         $tar = $arc->unpack($file, $target);
         $modeFile = $this->_getFileMode($configObj);
         $modeDir = $this->_getDirMode($configObj);
+        $failedFiles = array();
         foreach($contents as $file) {
             $fileName = basename($file);
             $filePath = dirname($file);
             $source = $tar.DS.$file;
             $targetPath = rtrim($configObj->magento_root, "\\/");
-            @mkdir($targetPath. DS . $filePath, $modeDir, true);
+            $source = $tar . DS . $file;
             $dest = $targetPath . DS . $filePath . DS . $fileName;
             if (is_file($source)) {
                 @copy($source, $dest);
@@ -386,6 +428,36 @@ class Mage_Connect_Packager
         Mage_System_Dirs::rm(array("-r",$target));
     }
 
+    /**
+     * @param array $content
+     * @param string $targetPath
+     * @param int $modeDir
+     * @throws RuntimeException
+     */
+    protected function _makeDirectories($content, $targetPath, $modeDir)
+    {
+        $failedDirs = array();
+        $createdDirs = array();
+        foreach ($content as $file) {
+            $dirPath = dirname($file);
+            if (is_dir($dirPath) && is_dir_writeable($dirPath)) {
+                continue;
+            }
+            if (!mkdir($targetPath . DS . $dirPath, $modeDir, true)) {
+                $failedDirs[] = $targetPath . DS .  $dirPath;
+            } else {
+                $createdDirs[] = $targetPath . DS . $dirPath;
+            }
+        }
+        if (!empty($failedDirs)) {
+            foreach ($createdDirs as $createdDir) {
+                $this->removeEmptyDirectory($createdDir);
+            }
+            $msg = sprintf("Failed to create directory:\r\n%s\r\n Check permissions", implode("\r\n", $failedDirs));
+            throw new RuntimeException($msg);
+        }
+    }
+
 
     /**
      * Get local modified files
@@ -415,6 +487,7 @@ class Mage_Connect_Packager
      * @param $package
      * @param $cacheObj
      * @param Mage_Connect_Ftp $ftp
+     * @throws RuntimeException
      * @return array
      */
     public function getRemoteModifiedFiles($chanName, $package, $cacheObj, $ftp)
diff --git downloader/lib/Mage/Connect/Rest.php downloader/lib/Mage/Connect/Rest.php
index 8d983f0..e734bbd 100644
--- downloader/lib/Mage/Connect/Rest.php
+++ downloader/lib/Mage/Connect/Rest.php
@@ -71,17 +71,14 @@ class Mage_Connect_Rest
     /**
      * Constructor
      */
-    public function __construct($protocol="http")
+    public function __construct($protocol="https")
     {
         switch ($protocol) {
-            case 'ftp':
-                $this->_protocol = 'ftp';
-                break;
             case 'http':
                 $this->_protocol = 'http';
                 break;
             default:
-                $this->_protocol = 'http';
+                $this->_protocol = 'https';
                 break;
         }
     }
diff --git downloader/lib/Mage/Connect/Singleconfig.php downloader/lib/Mage/Connect/Singleconfig.php
index ece5424..38e7fb2 100644
--- downloader/lib/Mage/Connect/Singleconfig.php
+++ downloader/lib/Mage/Connect/Singleconfig.php
@@ -100,7 +100,6 @@ class Mage_Connect_Singleconfig
         $uri = rtrim($uri, "/");
         $uri = str_replace("http://", '', $uri);
         $uri = str_replace("https://", '', $uri);
-        $uri = str_replace("ftp://", '', $uri);
         return $uri;
     }
 
diff --git downloader/lib/Mage/HTTP/Client/Curl.php downloader/lib/Mage/HTTP/Client/Curl.php
index 3cb9b42..f7826e1 100644
--- downloader/lib/Mage/HTTP/Client/Curl.php
+++ downloader/lib/Mage/HTTP/Client/Curl.php
@@ -361,47 +361,20 @@ implements Mage_HTTP_IClient
 
     /**
      * Make request
+     *
      * @param string $method
      * @param string $uri
      * @param array $params
-     * @return null
+     * @param boolean $isAuthorizationRequired
      */
-    protected function makeRequest($method, $uri, $params = array())
+    protected function makeRequest($method, $uri, $params = array(), $isAuthorizationRequired = true)
     {
-        static $isAuthorizationRequired = 0;
+        $uriModified = $this->getSecureRequest($uri, $isAuthorizationRequired);
         $this->_ch = curl_init();
-
-        // make request via secured layer
-        if ($isAuthorizationRequired && strpos($uri, 'https://') !== 0) {
-            $uri = str_replace('http://', '', $uri);
-            $uri = 'https://' . $uri;
-        }
-
-        $this->curlOption(CURLOPT_URL, $uri);
-        $this->curlOption(CURLOPT_SSL_VERIFYPEER, FALSE);
+        $this->curlOption(CURLOPT_URL, $uriModified);
+        $this->curlOption(CURLOPT_SSL_VERIFYPEER, false);
         $this->curlOption(CURLOPT_SSL_VERIFYHOST, 2);
-
-        // force method to POST if secured
-        if ($isAuthorizationRequired) {
-            $method = 'POST';
-        }
-
-        if($method == 'POST') {
-            $this->curlOption(CURLOPT_POST, 1);
-            $postFields = is_array($params) ? $params : array();
-            if ($isAuthorizationRequired) {
-                $this->curlOption(CURLOPT_COOKIEJAR, self::COOKIE_FILE);
-                $this->curlOption(CURLOPT_COOKIEFILE, self::COOKIE_FILE);
-                $postFields = array_merge($postFields, $this->_auth);
-            }
-            if (!empty($postFields)) {
-                $this->curlOption(CURLOPT_POSTFIELDS, $postFields);
-            }
-        } elseif($method == "GET") {
-            $this->curlOption(CURLOPT_HTTPGET, 1);
-        } else {
-            $this->curlOption(CURLOPT_CUSTOMREQUEST, $method);
-        }
+        $this->getCurlMethodSettings($method, $params, $isAuthorizationRequired);
 
         if(count($this->_headers)) {
             $heads = array();
@@ -444,23 +417,26 @@ implements Mage_HTTP_IClient
             $this->doError(curl_error($this->_ch));
         }
         if(!$this->getStatus()) {
-            return $this->doError("Invalid response headers returned from server.");
+            $this->doError("Invalid response headers returned from server.");
+            return;
         }
+
         curl_close($this->_ch);
+
         if (403 == $this->getStatus()) {
-            if (!$isAuthorizationRequired) {
-                $isAuthorizationRequired++;
-                $this->makeRequest($method, $uri, $params);
-                $isAuthorizationRequired=0;
+            if ($isAuthorizationRequired) {
+                $this->makeRequest($method, $uri, $params, false);
             } else {
-                return $this->doError(sprintf('Access denied for %s@%s', $_SESSION['auth']['login'], $uri));
+                $this->doError(sprintf('Access denied for %s@%s', $_SESSION['auth']['login'], $uriModified));
+                return;
             }
+        } elseif (405 == $this->getStatus()) {
+            $this->doError("HTTP Error 405 Method not allowed");
+            return;
         }
     }
 
     /**
-     * Throw error excpetion
-     * @param $string
      * @throws Exception
      */
     public function isAuthorizationRequired()
@@ -553,4 +529,44 @@ implements Mage_HTTP_IClient
     {
         $this->_curlUserOptions[$name] = $value;
     }
+
+    /**
+     * @param $uri
+     * @param $isAuthorizationRequired
+     * @return string
+     */
+    protected function getSecureRequest($uri, $isAuthorizationRequired = true)
+    {
+        if ($isAuthorizationRequired && strpos($uri, 'https://') !== 0) {
+            $uri = str_replace('http://', '', $uri);
+            $uri = 'https://' . $uri;
+            return $uri;
+        }
+        return $uri;
+    }
+
+    /**
+     * @param $method
+     * @param $params
+     * @param $isAuthorizationRequired
+     */
+    protected function getCurlMethodSettings($method, $params, $isAuthorizationRequired)
+    {
+        if ($method == 'POST') {
+            $this->curlOption(CURLOPT_POST, 1);
+            $postFields = is_array($params) ? $params : array();
+            if ($isAuthorizationRequired) {
+                $this->curlOption(CURLOPT_COOKIEJAR, self::COOKIE_FILE);
+                $this->curlOption(CURLOPT_COOKIEFILE, self::COOKIE_FILE);
+                $postFields = array_merge($postFields, $this->_auth);
+            }
+            if (!empty($postFields)) {
+                $this->curlOption(CURLOPT_POSTFIELDS, $postFields);
+            }
+        } elseif ($method == "GET") {
+            $this->curlOption(CURLOPT_HTTPGET, 1);
+        } else {
+            $this->curlOption(CURLOPT_CUSTOMREQUEST, $method);
+        }
+    }
 }
diff --git downloader/template/settings.phtml downloader/template/settings.phtml
index aec1c93..58142d1 100755
--- downloader/template/settings.phtml
+++ downloader/template/settings.phtml
@@ -63,8 +63,8 @@ function changeDeploymentType (element)
                     <td class="label">Magento Connect Channel Protocol:</td>
                     <td class="value">
                         <select id="protocol" name="protocol">
+                            <option value="https" <?php if ($this->get('protocol')=='https'):?>selected="selected"<?php endif ?>>Https</option>
                             <option value="http" <?php if ($this->get('protocol')=='http'):?>selected="selected"<?php endif ?>>Http</option>
-                            <option value="ftp" <?php if ($this->get('protocol')=='ftp'):?>selected="selected"<?php endif ?>>Ftp</option>
                         </select>
                     </td>
                 </tr>
